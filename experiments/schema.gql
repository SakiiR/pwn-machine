schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type ConnectedContainer {
  name: String
  mac: String
  ipv4: String
  ipv6: String
}

type ConnectedNetwork {
  name: String
  network: Network
}

type Container {
  id: ID
  name: String
  image: Image
  created: DateTime
  args: [String]
  mounts: [Mounts]
  volumeMounts: [VolumeMount]
  connectedNetworks: [ConnectedNetwork]
  exposedPorts: [ExposedPort]
  status: String
  labels: [KeyValue]
  environ: [KeyValue]
  cmd: [String]
  user: String
}

type CreateDnsRule {
  rule: Rule
}

type CreateDnsZone {
  zone: Zone
}

scalar DateTime

type DeleteDnsRule {
  ok: Boolean
}

type DeleteDnsZone {
  ok: Boolean
}

type DisableDnsRule {
  rule: Rule
}

type Dns {
  id: ID
  zones: [Zone]
  rules: [Rule]
  logs(ruleName: String, ruleType: String): [DnsLog]
}

type DnsLog {
  origin: String
  type: String
  domain: String
  time: String
}

type DnsLogsSubscription {
  log(ruleName: String, ruleType: String): DnsLog
}

type Docker {
  id: ID
  image(name: String): Image
  images: [Image]
  container(name: String): Container
  containers: [Container]
  volume(name: String): Volume
  volumes: [Volume]
  network(name: String): Network
  networks: [Network]
}

type EnableDnsRule {
  rule: Rule
}

type ExposedPort {
  hostIp: String
  hostPort: Int
  containerPort: Int
  protocol: String
}

type Image {
  id: ID
  shortId: String
  repoTags: [String]
  container: String
  rootFS: RootFS
  repository: String
  created: String
  size: Float
  tag: String
  usedBy: [Container]
}

type KeyValue {
  key: String
  value: String
}

input LabelInput {
  key: String!
  value: String!
}

type ModifySoaForDnsZone {
  zone: Zone
}

type Mounts {
  name: String
  volume: Volume
  source: String
  destination: String
  rw: Boolean
}

type Mutation {
  deleteDockerNetwork(name: String!): deleteDockerNetwork
  detachContainerFromDockerNetwork(container: String!, network: String!): detachContainerFromDockerNetwork
  attachContainerToDockerNetwork(container: String!, network: String!): attachContainerToDockerNetwork
  createDockerNetwork(gateway: String, internal: Boolean, labels: [LabelInput], name: String!, subnet: String): createDockerNetwork
  enableDnsRule(name: String!, type: String!, zone: String!): EnableDnsRule
  disableDnsRule(name: String!, type: String!, zone: String!): DisableDnsRule
  deleteDnsRule(name: String!, type: String!, zone: String!): DeleteDnsRule
  deleteDnsZone(zone: String!): DeleteDnsZone
  createDnsRule(rule: RuleInput!): CreateDnsRule
  updateRecordsForDnsRule(name: String!, records: [RecordInput], type: String!, zone: String!): UpdateRecordsForDnsRule
  updateTTLForDnsRule(name: String!, ttl: Int!, type: String!, zone: String!): UpdateTTLForDnsRule
  createDnsZone(name: String!, soa: SoaInput!): CreateDnsZone
  modifySoaForDnsZone(soa: SoaInput!, zone: String!): ModifySoaForDnsZone
}

type Network {
  id: ID
  name: String
  driver: String
  gateway: String
  subnet: String
  internal: Boolean
  labels: [KeyValue]
  usedBy: [Container]
  connectedContainers: [ConnectedContainer]
}

type Query {
  docker: Docker!
  dns: Dns!
}

type Record {
  content: String
  enabled: Boolean
}

input RecordInput {
  content: String!
  enabled: Boolean!
}

type RootFS {
  type: String
  layer: [String]
}

type Rule {
  id: ID
  zone: String
  type: String
  name: String
  records: [Record]
  ttl: Int
}

input RuleInput {
  zone: String!
  type: String!
  name: String!
  records: [RecordInput]
  ttl: Int!
}

type Soa {
  nameserver: String
  postmaster: String
  expire: Int
  refresh: Int
  retry: Int
  ttl: Int
  serial: Int
}

input SoaInput {
  nameserver: String!
  postmaster: String!
  expire: Int!
  refresh: Int!
  retry: Int!
  ttl: Int!
}

type Subscription {
  dnsLogsSubscription: DnsLogsSubscription
}

type UpdateRecordsForDnsRule {
  rule: Rule
}

type UpdateTTLForDnsRule {
  rule: Rule
}

type Volume {
  name: ID
  createdAt: String
  driver: String
  mountpoint: String
  usedBy: [Container]
  labels: [KeyValue]
}

type VolumeMount {
  source: String
  destination: String
  rw: Boolean
  name: String
  volume: Volume
}

type Zone {
  id: ID
  soa: Soa
  serial: Int
  name: String
  rules: [Rule]
}

type attachContainerToDockerNetwork {
  network: Network
}

type createDockerNetwork {
  network: Network
}

type deleteDockerNetwork {
  ok: Boolean
}

type detachContainerFromDockerNetwork {
  network: Network
}
