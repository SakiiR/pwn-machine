extend type Query {
  dockerContainers(onlyRunning: Boolean! = true): [DockerContainer!]!
  dockerContainerByName(name: String!): DockerContainer
  dockerContainerById(id: ID!): DockerContainer
}

extend type Mutation {
  createDockerContainer(input: DockerContainerInput!): DockerContainer
  startDockerContainer(id: ID!): DockerContainer
  restartDockerContainer(id: ID!): DockerContainer
  pauseDockerContainer(id: ID!): DockerContainer
  unpauseDockerContainer(id: ID!): DockerContainer
  stopDockerContainer(id: ID!): DockerContainer
  killDockerContainer(id: ID!): DockerContainer
  renameDockerContainer(id: ID!, name: String!): DockerContainer
  deleteDockerContainer(
    id: ID!
    force: Boolean! = false
    pruneVolumes: Boolean! = false
  ): Boolean!
  pruneDockerContainers: PruneResponse!
}


type DockerContainerProcess {
  user: String!
  pid: String!
  cpu: String!
  mem: String!
  vsz: String!
  rss: String!
  tty: String!
  stat: String!
  start: String!
  time: String!
  command: String!
}

type DockerContainer {
  id: ID!
  name: String!
  labels: [KeyValue!]!
  image: DockerImage!
  created: DateTime!
  command: [String!]!
  environment: [KeyValue!]!
  mounts: [DockerContainerMount!]!
  connections: [DockerContainerConnection!]!
  ports: [DockerContainerPort!]!
  status: DockerContainerStatus!
  privileged: Boolean!
  ps: [DockerContainerProcess]
}

input DockerContainerInput {
  name: String
  labels: [KeyValueInput!]! = []
  imageId: String!
  command: String
  user: String! = "root"
  workdir: String! = "/"
  environment: [KeyValueInput!]! = []
  privileged: Boolean! = false
  readonly: Boolean! = false
  mounts: [DockerContainerMountInput!]! = []
  ports: [DockerContainerPortInput!]! = []
  onExit: DockerContainerOnExit
}

type DockerContainerMount {
  type: DockerContainerMountType!
  volume: DockerVolume
  name: String
  source: String
  target: String!
  readonly: Boolean!
}

input DockerContainerMountInput {
  type: DockerContainerMountType! = VOLUME
  source: String
  target: String!
  readonly: Boolean! = false
}

enum DockerContainerMountType {
  bind
  volume
  tmpfs
}

type DockerContainerConnection {
  aliases: [String!]!
  ipAddress: String
  network: DockerNetwork
}

type DockerContainerPort {
  protocol: DockerContainerPortProtocol!
  containerPort: Int!
  hostBindings: [DockerContainerPortHostBinding!]!
}

input DockerContainerPortInput {
  protocol: DockerContainerPortProtocol! = TCP
  containerPort: Int!
  hostBindings: [DockerContainerPortHostBindingInput!]! = []
}

type DockerContainerPortHostBinding {
  ip: String!
  port: Int!
}

input DockerContainerPortHostBindingInput {
  ip: String! = "localhost"
  port: Int
}

enum DockerContainerPortProtocol {
  TCP
  UDP
  SCTP
}

enum DockerContainerStatus {
  CREATED
  RESTARTING
  RUNNING
  REMOVING
  PAUSED
  EXITED
  DEAD
}

enum DockerContainerOnExit {
  RESTART_ON_FAILURE
  RESTART_UNLESS_STOPPED
  RESTART_ALWAYS
  REMOVE
}