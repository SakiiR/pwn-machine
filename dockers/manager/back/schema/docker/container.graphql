extend type Query {
  dockerContainers(onlyRunning: Boolean = true): [DockerContainer!]!
}

type DockerContainerConnection {
  aliases: [String!]!
  ipAddress: String
  network: DockerNetwork
}

type DockerContainer {
  id: ID!
  name: String!
  labels: [KeyValue!]!
  image: DockerImage!
  created: DateTime!
  command: [String!]!
  environment: [KeyValue!]!
  mounts: [DockerContainerMount!]!
  connections: [DockerContainerConnection!]!
  ports: [DockerContainerPort!]!
  status: DockerContainerStatus!
  privileged: Boolean!
}

enum DockerContainerStatus {
  CREATED
  RESTARTING
  RUNNING
  REMOVING
  PAUSED
  EXITED
  DEAD
}

type DockerContainerMount {
  type: DockerContainerMountType!
  volume: DockerVolume
  source: String
  target: String!
  readonly: Boolean!
}

enum DockerContainerMountType {
  BIND
  VOLUME
  TMPFS
  NPIPE
}

type DockerContainerPort {
  protocol: DockerContainerPortProtocol!
  containerPort: Int!
  hostBindings: [DockerContainerPortHostBinding!]!
}

type DockerContainerPortHostBinding {
  ip: String!
  port: Int!
}

enum DockerContainerPortProtocol {
  TCP
  UDP
}
