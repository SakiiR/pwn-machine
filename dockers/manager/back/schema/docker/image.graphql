extend type Query {
  dockerImages(onlyFinal: Boolean! = true): [DockerImage!]!
}

extend type Mutation {
  pullDockerImage(name: String!): DockerImagePull!
  dockerRemoveImage(
    id: ID!
    force: Boolean! = false
    pruneParents: Boolean! = true
  ): Boolean!
  pruneDockerImages(onlyDangling: Boolean! = true): PruneResponse!
}

type DockerImage {
  id: ID!
  shortId: String!
  name: String!
  tags: [String!]!
  labels: [KeyValue!]!
  parent: ID!
  created: DateTime!
  size: Float!
  entrypoint: [String!]
  command: [String!]
  environment: [KeyValue!]!
  usedBy(onlyRunning: Boolean! = true): [DockerContainer!]!
}

extend type Mutation {
  dockerTagImage(
    id: ID!
    tag: DockerImageTagInput!
    force: Boolean! = false
  ): DockerImage
}

input DockerImageTagInput {
  repository: String!
  tag: String! = "latest"
}

extend type Query {
  dockerSearchImage(search: String!): [DockerSearchImageResult!]!
}

type DockerSearchImageResult {
  name: String!
  isOfficial: Boolean!
  isAutomated: Boolean!
  description: String!
  starCount: Int!
}

extend type Query {
  dockerSearchImageTag(
    repoName: String!
    imageName: String!
  ): [DockerSearchImageTagResult!]!
}

type DockerSearchImageTagResult {
  name: String!
  size: Float!
  lastUpdated: DateTime!
}

type DockerImagePullProgressDetail {
  current: Int
  total: Int
}

type DockerImagePullLogEntry {
  status: String!
  id: String
  progressDetail: DockerImagePullProgressDetail
  progress: String
}

type DockerImagePull {
  id: ID!
  name: String
}

extend type Query {
  dockerImagePulls: [DockerImagePull!]!
}

extend type Subscription {
  pullImageProgress(id: ID!): DockerImagePullLogEntry
}
