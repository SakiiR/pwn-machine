extend type Query {
  dockerNetworks: [DockerNetwork!]!
}

extend type Mutation {
  dockerCreateNetwork(input: DockerNetworkInput!): DockerNetwork
}

type DockerNetwork {
  id: ID!
  name: String!
  labels: [KeyValue!]!
  created: DateTime!
  ipv6: Boolean!
  driver: String!
  builtin: Boolean!
  internal: Boolean!
  ipams: [DockerNetworkIpam!]!
  connections: [DockerNetworkConnection!]!
}

input DockerNetworkInput {
  name: String!
  labels: [KeyValueInput!]! = []
  ipv6: Boolean = false
  driver: String! = "bridge"
  internal: Boolean = false
  ipam: DockerNetworkIpamInput
}

type DockerNetworkIpam {
  subnet: String!
  ipRange: String
  gateway: String
}

input DockerNetworkIpamInput {
  subnet: String
  ipRange: String
  gateway: String
}

extend type Mutation {
  dockerConnectContainerToNetwork(
    input: DockerNetworkConnectionInput
  ): Boolean!
  dockerDisconnectContainerFromNetwork(
    input: DockerNetworkConnectionInput
  ): Boolean!
}

type DockerNetworkConnection {
  ipv4Address: String
  ipv6Address: String
  container: DockerContainer!
}

input DockerNetworkConnectionInput {
  networkId: ID!
  containerId: ID!
}

extend type Mutation {
  dockerRemoveNetwork(id: ID!): Boolean!
  dockerPruneNetworks: Boolean!
}
