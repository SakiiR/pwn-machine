 

interface TraefikMiddleware {
    name: String!
    provider: String!
    type: String!
    enabled: Boolean
    usedBy: [TraefikRouter!]!
}

type TraefikMiddlewareHeaderPair {
    name: String
    value: String
}


type TraefikMiddlewareAddPrefixInfo {
  prefix: String
}

type TraefikMiddlewareAddPrefix implements TraefikMiddleware {
  name: String!
  provider: String!
  type: String!
  enabled: Boolean
  usedBy: [TraefikRouter!]!
  addPrefix: TraefikMiddlewareAddPrefixInfo!
}



type TraefikMiddlewareBasicAuthInfo {
  headerField: String
  realm: String
  removeHeader: Boolean
  users: [String]
  usersFile: String
}

type TraefikMiddlewareBasicAuth implements TraefikMiddleware {
  name: String!
  provider: String!
  type: String!
  enabled: Boolean
  usedBy: [TraefikRouter!]!
  basicAuth: TraefikMiddlewareBasicAuthInfo!
}



type TraefikMiddlewareBufferingInfo {
  maxRequestBodyBytes: Int
  maxResponseBodyBytes: Int
  memRequestBodyBytes: Int
  memResponseBodyBytes: Int
  retryExpression: String
}

type TraefikMiddlewareBuffering implements TraefikMiddleware {
  name: String!
  provider: String!
  type: String!
  enabled: Boolean
  usedBy: [TraefikRouter!]!
  buffering: TraefikMiddlewareBufferingInfo!
}



type TraefikMiddlewareChainInfo {
  middlewares: [String]
}

type TraefikMiddlewareChain implements TraefikMiddleware {
  name: String!
  provider: String!
  type: String!
  enabled: Boolean
  usedBy: [TraefikRouter!]!
  chain: TraefikMiddlewareChainInfo!
}



type TraefikMiddlewareCircuitBreakerInfo {
  expression: String
}

type TraefikMiddlewareCircuitBreaker implements TraefikMiddleware {
  name: String!
  provider: String!
  type: String!
  enabled: Boolean
  usedBy: [TraefikRouter!]!
  circuitBreaker: TraefikMiddlewareCircuitBreakerInfo!
}



type TraefikMiddlewareCompressInfo {
  excludedContentTypes: [String]
}

type TraefikMiddlewareCompress implements TraefikMiddleware {
  name: String!
  provider: String!
  type: String!
  enabled: Boolean
  usedBy: [TraefikRouter!]!
  compress: TraefikMiddlewareCompressInfo!
}



type TraefikMiddlewareContentTypeInfo {
  autoDetect: Boolean
}

type TraefikMiddlewareContentType implements TraefikMiddleware {
  name: String!
  provider: String!
  type: String!
  enabled: Boolean
  usedBy: [TraefikRouter!]!
  contentType: TraefikMiddlewareContentTypeInfo!
}



type TraefikMiddlewareDigestAuthInfo {
  headerField: String
  realm: String
  removeHeader: Boolean
  users: [String]
  usersFile: String
}

type TraefikMiddlewareDigestAuth implements TraefikMiddleware {
  name: String!
  provider: String!
  type: String!
  enabled: Boolean
  usedBy: [TraefikRouter!]!
  digestAuth: TraefikMiddlewareDigestAuthInfo!
}



type TraefikMiddlewareErrorsInfo {
  query: String
  service: String
  status: [String]
}

type TraefikMiddlewareErrors implements TraefikMiddleware {
  name: String!
  provider: String!
  type: String!
  enabled: Boolean
  usedBy: [TraefikRouter!]!
  errors: TraefikMiddlewareErrorsInfo!
}



type TraefikMiddlewareTlsInfo {
  ca: String
  caOptional: Boolean
  cert: String
  insecureSkipVerify: Boolean
  key: String
}

type TraefikMiddlewareTls implements TraefikMiddleware {
  name: String!
  provider: String!
  type: String!
  enabled: Boolean
  usedBy: [TraefikRouter!]!
  tls: TraefikMiddlewareTlsInfo!
}



type TraefikMiddlewareForwardAuthInfo {
  address: String
  authRequestHeaders: [String]
  authResponseHeaders: [String]
  authResponseHeadersRegex: String
  tls: TraefikMiddlewareTls
  trustForwardHeader: Boolean
}

type TraefikMiddlewareForwardAuth implements TraefikMiddleware {
  name: String!
  provider: String!
  type: String!
  enabled: Boolean
  usedBy: [TraefikRouter!]!
  forwardAuth: TraefikMiddlewareForwardAuthInfo!
}



type TraefikMiddlewareHeadersInfo {
  accessControlAllowCredentials: Boolean
  accessControlAllowHeaders: [String]
  accessControlAllowMethods: [String]
  accessControlAllowOrigin: String
  accessControlAllowOriginList: [String]
  accessControlAllowOriginListRegex: [String]
  accessControlExposeHeaders: [String]
  accessControlMaxAge: Int
  addVaryHeader: Boolean
  allowedHosts: [String]
  browserXssFilter: Boolean
  contentSecurityPolicy: String
  contentTypeNosniff: Boolean
  customBrowserXSSValue: String
  customFrameOptionsValue: String
  customRequestHeaders: [TraefikMiddlewareHeaderPair]
  customResponseHeaders: [TraefikMiddlewareHeaderPair]
  featurePolicy: String
  forceSTSHeader: Boolean
  frameDeny: Boolean
  hostsProxyHeaders: [String]
  isDevelopment: Boolean
  publicKey: String
  referrerPolicy: String
  sslForceHost: Boolean
  sslHost: String
  sslProxyHeaders: [TraefikMiddlewareHeaderPair]
  sslRedirect: Boolean
  sslTemporaryRedirect: Boolean
  stsIncludeSubdomains: Boolean
  stsPreload: Boolean
  stsSeconds: Int
}

type TraefikMiddlewareHeaders implements TraefikMiddleware {
  name: String!
  provider: String!
  type: String!
  enabled: Boolean
  usedBy: [TraefikRouter!]!
  headers: TraefikMiddlewareHeadersInfo!
}



type TraefikMiddlewareIpStrategyInfo {
  depth: Int
  excludedIPs: [TraefikMiddlewareHeaderPair]
}

type TraefikMiddlewareIpStrategy implements TraefikMiddleware {
  name: String!
  provider: String!
  type: String!
  enabled: Boolean
  usedBy: [TraefikRouter!]!
  ipStrategy: TraefikMiddlewareIpStrategyInfo!
}



type TraefikMiddlewareIpWhiteListInfo {
  ipStrategy: TraefikMiddlewareIpStrategy
  sourceRange: [String]
}

type TraefikMiddlewareIpWhiteList implements TraefikMiddleware {
  name: String!
  provider: String!
  type: String!
  enabled: Boolean
  usedBy: [TraefikRouter!]!
  ipWhiteList: TraefikMiddlewareIpWhiteListInfo!
}



type TraefikMiddlewareSourceCriterionInfo {
  ipStrategy: TraefikMiddlewareIpStrategy
  requestHeaderName: String
  requestHost: Boolean
}

type TraefikMiddlewareSourceCriterion implements TraefikMiddleware {
  name: String!
  provider: String!
  type: String!
  enabled: Boolean
  usedBy: [TraefikRouter!]!
  sourceCriterion: TraefikMiddlewareSourceCriterionInfo!
}



type TraefikMiddlewareInFlightReqInfo {
  amount: Int
  sourceCriterion: TraefikMiddlewareSourceCriterion
}

type TraefikMiddlewareInFlightReq implements TraefikMiddleware {
  name: String!
  provider: String!
  type: String!
  enabled: Boolean
  usedBy: [TraefikRouter!]!
  inFlightReq: TraefikMiddlewareInFlightReqInfo!
}



type TraefikMiddlewareIssuerInfo {
  commonName: Boolean
  country: Boolean
  domainComponent: Boolean
  locality: Boolean
  organization: Boolean
  province: Boolean
  serialNumber: Boolean
}

type TraefikMiddlewareIssuer implements TraefikMiddleware {
  name: String!
  provider: String!
  type: String!
  enabled: Boolean
  usedBy: [TraefikRouter!]!
  issuer: TraefikMiddlewareIssuerInfo!
}



type TraefikMiddlewareSubjectInfo {
  commonName: Boolean
  country: Boolean
  domainComponent: Boolean
  locality: Boolean
  organization: Boolean
  province: Boolean
  serialNumber: Boolean
}

type TraefikMiddlewareSubject implements TraefikMiddleware {
  name: String!
  provider: String!
  type: String!
  enabled: Boolean
  usedBy: [TraefikRouter!]!
  subject: TraefikMiddlewareSubjectInfo!
}



type TraefikMiddlewareInfoInfo {
  issuer: TraefikMiddlewareIssuer
  notAfter: Boolean
  notBefore: Boolean
  sans: Boolean
  serialNumber: Boolean
  subject: TraefikMiddlewareSubject
}

type TraefikMiddlewareInfo implements TraefikMiddleware {
  name: String!
  provider: String!
  type: String!
  enabled: Boolean
  usedBy: [TraefikRouter!]!
  info: TraefikMiddlewareInfoInfo!
}



type TraefikMiddlewarePassTLSClientCertInfo {
  info: TraefikMiddlewareInfo
  pem: Boolean
}

type TraefikMiddlewarePassTLSClientCert implements TraefikMiddleware {
  name: String!
  provider: String!
  type: String!
  enabled: Boolean
  usedBy: [TraefikRouter!]!
  passTLSClientCert: TraefikMiddlewarePassTLSClientCertInfo!
}



type TraefikMiddlewareRateLimitInfo {
  average: Int
  burst: Int
  period: Int
  sourceCriterion: TraefikMiddlewareSourceCriterion
}

type TraefikMiddlewareRateLimit implements TraefikMiddleware {
  name: String!
  provider: String!
  type: String!
  enabled: Boolean
  usedBy: [TraefikRouter!]!
  rateLimit: TraefikMiddlewareRateLimitInfo!
}



type TraefikMiddlewareRedirectRegexInfo {
  permanent: Boolean
  regex: String
  replacement: String
}

type TraefikMiddlewareRedirectRegex implements TraefikMiddleware {
  name: String!
  provider: String!
  type: String!
  enabled: Boolean
  usedBy: [TraefikRouter!]!
  redirectRegex: TraefikMiddlewareRedirectRegexInfo!
}



type TraefikMiddlewareRedirectSchemeInfo {
  permanent: Boolean
  port: String
  scheme: String
}

type TraefikMiddlewareRedirectScheme implements TraefikMiddleware {
  name: String!
  provider: String!
  type: String!
  enabled: Boolean
  usedBy: [TraefikRouter!]!
  redirectScheme: TraefikMiddlewareRedirectSchemeInfo!
}



type TraefikMiddlewareReplacePathInfo {
  path: String
}

type TraefikMiddlewareReplacePath implements TraefikMiddleware {
  name: String!
  provider: String!
  type: String!
  enabled: Boolean
  usedBy: [TraefikRouter!]!
  replacePath: TraefikMiddlewareReplacePathInfo!
}



type TraefikMiddlewareReplacePathRegexInfo {
  regex: String
  replacement: String
}

type TraefikMiddlewareReplacePathRegex implements TraefikMiddleware {
  name: String!
  provider: String!
  type: String!
  enabled: Boolean
  usedBy: [TraefikRouter!]!
  replacePathRegex: TraefikMiddlewareReplacePathRegexInfo!
}



type TraefikMiddlewareRetryInfo {
  attempts: Int
  initialInterval: Int
}

type TraefikMiddlewareRetry implements TraefikMiddleware {
  name: String!
  provider: String!
  type: String!
  enabled: Boolean
  usedBy: [TraefikRouter!]!
  retry: TraefikMiddlewareRetryInfo!
}



type TraefikMiddlewareStripPrefixInfo {
  forceSlash: Boolean
  prefixes: [String]
}

type TraefikMiddlewareStripPrefix implements TraefikMiddleware {
  name: String!
  provider: String!
  type: String!
  enabled: Boolean
  usedBy: [TraefikRouter!]!
  stripPrefix: TraefikMiddlewareStripPrefixInfo!
}



type TraefikMiddlewareStripPrefixRegexInfo {
  regex: [String]
}

type TraefikMiddlewareStripPrefixRegex implements TraefikMiddleware {
  name: String!
  provider: String!
  type: String!
  enabled: Boolean
  usedBy: [TraefikRouter!]!
  stripPrefixRegex: TraefikMiddlewareStripPrefixRegexInfo!
}



