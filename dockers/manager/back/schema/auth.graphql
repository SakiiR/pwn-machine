extend type Query {
  authSetupNeeded: SetupStep
  authTotpUri: String!
}

enum SetupStep {
  PASSWORD
  TOTP
}

type InitializeAuthPayload implements IMutationResponse   {
  error: String
  success: Boolean!
  result: AuthToken
}
type LoginPayload implements IMutationResponse{
  error: String
  success: Boolean!
  result: AuthToken
}

extend type Mutation {
  validateAuthToken(token: String!): ValidateAuthTokenPayload!
  initializeAuth(password: String!, otp: String!): InitializeAuthPayload!
  login(password: String!, otp: String!, expire: Int): LoginPayload!
  updatePassword(old: String!, new: String!): BasicMutationResponse!
}
type ValidateAuthTokenPayload {
  token: AuthToken
  isFirstRun: Boolean!
}

type AuthToken {
  token: String!
  expire: DateTime
}
